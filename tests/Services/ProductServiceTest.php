<?php

namespace Src\Tests\Services;

use PHPUnit\Framework\TestCase;
use Src\Models\DatabaseMysql;
use Src\Services\HistoryService;
use Src\Services\ProductService;
use Src\Tests\MigrationControl;

class ProductServiceTest extends TestCase
{
    use MigrationControl;

    protected $database;
    protected $migrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->database = new DatabaseMysql();
        $this->database->openConnection();
        $this->executeMigrations();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->migrations->clearDB();
    }

    public function testRegisterProductShouldSuccess()
    {
        $productService = new ProductService("pt", $this->database);
        $data = [
            "feijao" => "123",
            "arroz" => "123",
            "name_pt" => "TV_pt",
            "name_en" => "TV_en",
            "price_pt" => 200.50,
            "price_en" => 100.50,
            "sale_price_pt" => 500.20,
            "sale_price_en" => 200.30,
        ];

        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);

        $res = $productService->getAllProducts();
        $this->assertCount(1, $res);
        $this->assertEquals($data["name_pt"], $res[0]["name_pt"]);
        $this->assertEquals($data["name_en"], $res[0]["name_en"]);
        $this->assertEquals($data["price_pt"], $res[0]["price_pt"]);
        $this->assertEquals($data["price_en"], $res[0]["price_en"]);
        $this->assertEquals($data["sale_price_pt"], $res[0]["sale_price_pt"]);
        $this->assertEquals($data["sale_price_en"], $res[0]["sale_price_en"]);
    }

    public function testGetIdFromTheBestSellingProductFromList()
    {
        $productService = new ProductService("pt", $this->database);
        $historyService = new HistoryService("pt", $this->database);
        $historyService->setProductService($productService);

        $data = [
            "name_pt" => "TV_pt",
            "name_en" => "TV_en",
            "price_pt" => 200.50,
            "price_en" => 100.50,
            "sale_price_pt" => 500.20,
            "sale_price_en" => 200.30,
        ];

        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);
        $data = [
            "name_pt" => "CAR_pt",
            "name_en" => "CAR_en",
            "price_pt" => 300.50,
            "price_en" => 200.50,
            "sale_price_pt" => 600.20,
            "sale_price_en" => 300.30,
        ];
        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);
        $productService->makeASale(1);
        $saleDetails = $productService->getSaleDetails();
        $historyService->registerSale($saleDetails);

        $productService->makeASale(2);
        $saleDetails = $productService->getSaleDetails();
        $historyService->registerSale($saleDetails);

        $productService->makeASale(2);
        $saleDetails = $productService->getSaleDetails();
        $historyService->registerSale($saleDetails);

        $bestSelling = $historyService->getTheBestSellingProduct();
        $this->assertEquals(2, $bestSelling["id"]);

        $productService->makeASale(1);
        $saleDetails = $productService->getSaleDetails();
        $historyService->registerSale($saleDetails);

        $productService->makeASale(1);
        $saleDetails = $productService->getSaleDetails();
        $historyService->registerSale($saleDetails);

        $bestSelling = $historyService->getTheBestSellingProduct();
        $this->assertEquals(1, $bestSelling["id"]);
    }

    public function testShowProductsByUserLanguage()
    {
        $productService = new ProductService("ru", $this->database);

        $data = [
            "name_pt" => "TV_pt",
            "name_en" => "TV_en",
            "name_ru" => "TV_ru",
            "price_pt" => 200.50,
            "price_en" => 100.50,
            "price_ru" => 300.50,
            "sale_price_pt" => 500.20,
            "sale_price_en" => 200.30,
            "sale_price_ru" => 600.30,
        ];

        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);

        $products = $productService->getAllProductsToShowOnHTML();
        $this->assertEquals("TV_ru", $products[0]["name"]);
        $this->assertEquals(300.50, $products[0]["price"]);
        $this->assertEquals( 600.30, $products[0]["sale_price"]);
    }

    public function testEditProductShouldSuccess()
    {
        $productService = new ProductService("pt", $this->database);
        $data = [
            "name_pt" => "TV_pt",
            "name_en" => "TV_en",
            "price_pt" => 200.50,
            "price_en" => 100.50,
            "sale_price_pt" => 500.20,
            "sale_price_en" => 200.30,
        ];

        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);

        $newData = [
            "id" => 1,
            "name_pt" => "Car_pt",
            "price_pt" => 300
        ];

        $res = $productService->changingProduct($newData);
        $this->assertTrue($res);

        $products = $productService->getAllProductsToShowOnHTML();
        $this->assertEquals("Car_pt", $products[0]["name"]);
        $this->assertEquals(300, $products[0]["price"]);
    }

    public function testShowProductWithPriceOff()
    {
        $productService = new ProductService("ru", $this->database);

        $data = [
            "name_pt" => "TV_pt",
            "name_en" => "TV_en",
            "name_ru" => "TV_ru",
            "price_pt" => 200.50,
            "price_en" => 100.50,
            "price_ru" => 300.50,
            "sale_price_pt" => 500.20,
            "sale_price_en" => 200.30,
            "sale_price_ru" => 600.30,
            "sale_start" => "2019-01-01 00:00:00",
            "sale_end" => "2022-01-01 00:00:00"
        ];

        $res = $productService->registeringProduct($data);
        $this->assertTrue($res);

        $products = $productService->getAllProductsToShowOnHTML();
        $this->assertEquals(-299.80, $products[0]["off_price"]);
    }
}